lno@0  @31  NODE PROG    children:[@3 @7 @21 @28 ]  
lno@1  @3  NODE STMT  STMT DECL  children:[@1 @0 @2 ]  
lno@1  @1  NODE TYPE  int  children:[]  
lno@1  @0  NODE VAR  var name: a  children:[]  
lno@1  @2  NODE CONST  int: 0  children:[]  
lno@2  @7  NODE STMT  STMT DECL  children:[@5 @4 @6 ]  
lno@2  @5  NODE TYPE  int  children:[]  
lno@2  @4  NODE VAR  var name: b  children:[]  
lno@2  @6  NODE CONST  int: 2  children:[]  
lno@2  @21  NODE STMT  STMT IF  children:[@22 ]  
lno@2  @22  NODE STMT  STMT DOMAIN  children:[@10 @15 @20 ]  
lno@3  @10  NODE EXPR  OP: ==  children:[@8 @11 ]  
lno@3  @8  NODE EXPR  OP: !  children:[@9 ]  
lno@3  @9  NODE CONST  int: 2  children:[]  
lno@3  @11  NODE CONST  int: 3  children:[]  
lno@4  @15  NODE STMT  STMT DECL  children:[@13 @12 @14 ]  
lno@4  @13  NODE TYPE  int  children:[]  
lno@4  @12  NODE VAR  var name: a  children:[]  
lno@4  @14  NODE CONST  int: 2  children:[]  
lno@5  @20  NODE STMT  =  children:[@16 @18 ]  
lno@5  @16  NODE VAR  var name: a  children:[]  
lno@5  @18  NODE EXPR  OP: +  children:[@17 @19 ]  
lno@5  @17  NODE VAR  var name: a  children:[]  
lno@5  @19  NODE CONST  int: 2  children:[]  
lno@5  @28  NODE STMT  STMT WHILE  children:[@29 ]  
lno@5  @29  NODE STMT  STMT DOMAIN  children:[@24 @26 ]  
lno@7  @24  NODE EXPR  OP: ==  children:[@23 @25 ]  
lno@7  @23  NODE VAR  var name: a  children:[]  
lno@7  @25  NODE VAR  var name: b  children:[]  
lno@8  @26  NODE STMT  printf  children:[@27 ]  
lno@8  @27  NODE VAR  var name: a  children:[]  
